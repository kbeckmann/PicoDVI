;
; Copyright (c) 2022-2023 Konrad Beckmann
;
; SPDX-License-Identifier: BSD-3-Clause
;

.program n64

; Video
; Data is stable on Negedge of CLK
; 0-6 = data
; 7   = dsync
; 8   = clk

; Audio
;  9 = SDAT
; 10 = LRCLK
; 11 = BCLK

; ----------------------------------------------------------
; Video data sampling
; ----------------------------------------------------------

public n64_video_start:

    ; Wait for high CLK
    wait 1 pin 8

    ; Sample 4 bytes in total
    set x, 2

    ; Wait for low CLK
    wait 0 pin 8

    ; if DSYNC: goto n64_video_start
    jmp pin n64_video_start

    ; DSYNC == 0

    ; Sample first byte if data + dsyncn
    in pins, 8

n64_video_capture_loop:

    ; Wait for high CLK
    wait 1 pin 8
    ; Wait for low CLK
    wait 0 pin 8

    ; Sample data + dsyncn
    in pins, 8

    jmp x-- n64_video_capture_loop

    ; Auto-push is enabled, saves one instruction/cycle
    ; push

    jmp n64_video_start

; ----------------------------------------------------------
; Audio data sampling
; ----------------------------------------------------------

public n64_audio_start:

    ; First phase - let's do single channel PIO first

    ; Wait for rising edge of LRCLK (known initial state)
    ; While true {
    ;   LRCLK == 1 (Left channel)
    ;   Skip the first bit (Right channel left-over)
    ;   Read 16 bits on BCLK rising edge into shiftreg
    ;   LRCLK == 0 (Right channel)
    ;   Skip the first bit (Left channel left-over)
    ;     If LRCLK == 1, break // Should only happen if sync is lost
    ;   Read 16 bits on BCLK rising edge into shiftreg
    ; }

    ; Clear ISR, needed in case we end up here after a desync.
    ; If not done, left/right will get swapped.
    mov isr, null

    ; Wait for posedge LRCLK
    wait 0 pin 1
    wait 1 pin 1

n64_audio_left_start:

.wrap_target

    ; ------
    ; Skip the first sample (17th stray bit of previous sample)
    ; Wait for low BCLK
    wait 0 pin 2

    ; Time between this step and the next is a few microseconds.
    ; Could use time to set variables etc.
    ; Set x=15 (Sample 16 bits)
    set x, 15

    ; Wait for high BCLK
    wait 1 pin 2

    ; End of skip
    ; ------

n64_audio_left_capture_loop:
    ; Wait for low BCLK
    wait 0 pin 2

    ; Wait for high BCLK
    wait 1 pin 2

    ; Sample a data bit
    in pins, 1

    jmp x-- n64_audio_left_capture_loop

; ----------------------------------------------------------
; Left channel has been captured. Capture right channel now.
; ----------------------------------------------------------

n64_audio_right_start:

    ; ------
    ; Skip the first sample (17th stray bit of previous sample)
    ; Wait for low BCLK
    wait 0 pin 2

    ; Time between this step and the next is a few microseconds.
    ; Use time to set variables etc.

    ; Double check that LRCLK == 0. Should help recover desync issues.
    ; 'jmp pin' can only branch if the pin is high, so we can't do this in the Left case.
    jmp pin n64_audio_start

    ; Set x=15 (Sample 16 bits)
    set x, 15

    ; Wait for high BCLK
    wait 1 pin 2

    ; End of skip
    ; ------


n64_audio_right_capture_loop:
    ; Wait for low BCLK
    wait 0 pin 2

    ; Wait for high BCLK
    wait 1 pin 2

    ; Sample a data bit
    in pins, 1

    jmp x-- n64_audio_right_capture_loop

; ----------------------------------------------------------
; Right channel has been captured.
; ----------------------------------------------------------

    ; Auto-push is enabled, saves one instruction/cycle
    ; push

    ; Loop (Implicit loop because of wrap/wrap_target)
    ; jmp n64_audio_left_start

.wrap


% c-sdk {
void n64_video_program_init(PIO pio, uint sm, uint offset)
{
    // gpio0 -> 8 input
    for (int i = 0; i <= 8; i++) {
        pio_gpio_init(pio, i);
    }

    pio_sm_config c = n64_program_get_default_config(offset);

    // Double the FIFO depth
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);

    // Enable auto-push
    sm_config_set_in_shift(&c, true, true, 32);

    // GPIO0 -> GPIO8 as in pins
    sm_config_set_in_pins(&c, 0);

    // JMP pin = DSYNCn
    sm_config_set_jmp_pin(&c, 7);

    pio_sm_init(pio, sm, offset, &c);
}

void n64_audio_program_init(PIO pio, uint sm, uint offset)
{
    // gpio9 -> 11 input
    for (int i = 9; i <= 11; i++) {
        pio_gpio_init(pio, i);
    }

    pio_sm_config c = n64_program_get_default_config(offset);

    // Double the FIFO depth
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);

    // MSB first, shift left
    sm_config_set_in_shift(&c, false, true, 32);

    // GPIO9 as in pin start
    sm_config_set_in_pins(&c, 9);

    // JMP pin = LRCLK (gpio10)
    // Note: pin is the raw pin number, not relative to in_pins
    sm_config_set_jmp_pin(&c, 10);

    pio_sm_init(pio, sm, offset + n64_offset_n64_audio_start, &c);
}
%}
